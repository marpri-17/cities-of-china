{"version":3,"sources":["components/Header.js","components/CityItem.js","components/CitiesList.js","components/SelectedCities.js","components/FilterByName.js","components/Loader.js","components/App.js","index.js"],"names":["Header","className","CityItem","city","handleCityCheckbox","key","id","data-id","type","onChange","name","checked","isSelected","htmlFor","src","alt","lang","chineseName","CitiesList","cities","handleSelectAll","handleCheck","length","map","SelectedCities","selectedCities","handleDeleteCity","resetSelectedList","onClick","icon","FilterByName","handleFilterByName","placeholder","Loader","library","add","faTimes","faSearch","App","props","state","allChinaCities","nameQuery","getAllCitiesFromServer","bind","this","fetch","then","resp","json","allCities","setState","e","selectedCityID","target","parentNode","dataset","newAllcities","push","elementId","currentTarget","newSelectedCities","filteredCities","filter","chineseCity","toLowerCase","includes","selectedCitiesFromFilter","userQuerySearch","value","reduce","acc","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f26170f.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/layouts/header.scss'\n\nconst Header = () => {\n    return (\n        <header className=\"header__wrapper\">\n            <h1 className=\"header__title\">Cities of China</h1>\n            <hr />\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst CityItem = ({ city, handleCityCheckbox }) => {\n    return (\n        <li key={city.id} className=\"main__list_item\" data-id={city.id}>\n            <input type=\"checkbox\" onChange={handleCityCheckbox} name=\"listinput\" checked={city.isSelected} />\n            <label className=\"main__list_item_label\" htmlFor=\"listinput\"><span></span></label>\n            <img src=\"./images/landscape.svg\" alt=\"\" className=\"main__list_img\" />\n            <div className=\"main__list_infowrapper\">\n                <p>{city.name}</p>\n                <p lang=\"zh\">{city.chineseName}</p>\n            </div>\n\n        </li>\n    )\n}\n\nexport default CityItem\n","import React from 'react';\nimport CityItem from './CityItem';\nimport '../stylesheets/layouts/main.scss'\n\nconst CitiesList = ({ cities, handleCityCheckbox, handleSelectAll, handleCheck }) => {\n    return (\n        <div>\n            <input type=\"checkbox\" onChange={handleSelectAll} checked={handleCheck()} />\n            <label className=\"main__list_selectAll-label\">\n                <span onChange={handleSelectAll}></span> {cities.length} items\n            </label>\n            <hr />\n            <div className=\"main__list_wrapper\">\n                <ul className=\"main__list\">\n                    {cities.map(city => {\n                        return <CityItem city={city} handleCityCheckbox={handleCityCheckbox} key={city.id} />\n                    })}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\n\nexport default CitiesList;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst SelectedCities = ({ selectedCities, handleDeleteCity, resetSelectedList }) => {\n    return (\n        < div className=\"main__selected_wrapper\">\n            <div className=\"main__selected_header\">\n                <p className=\"main__selected_header_length\">{selectedCities.length} items</p>\n                <p className=\"main__selected_header_clear\" onClick={resetSelectedList}>clear</p>\n            </div>\n            <div className=\"main__selected_wrapperlist\">\n                <ul className=\"main__selected_list\">\n                    {selectedCities.length ? selectedCities.map(city =>\n                        <li key={city.id} className=\"main__selected_item\" data-id={city.id} onClick={handleDeleteCity} >\n                            <img src=\"./images/landscape.svg\" alt=\"\" className=\"main__list_img\" />\n                            <div className=\"main__list_infowrapper\">\n                                <p>{city.name}</p>\n                                <p lang=\"zh\">{city.chineseName}</p>\n                            </div>\n                            <div className=\"main__selected_iconwrapper\">\n                                <FontAwesomeIcon icon=\"times\" className=\"main__selected_icon\" />\n                            </div>\n                        </li>) : \"Select a city individually or all at once!\"\n                    }\n                </ul>\n            </div>\n        </div>)\n}\n\nexport default SelectedCities","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '../stylesheets/layouts/filter.scss';\n\n\nconst FilterByName = ({ handleFilterByName }) => {\n    return (\n        <>\n            <div className=\"filter__wrapper\">\n                <FontAwesomeIcon icon=\"search\" />\n                <input type=\"text\" className=\"filter__inputname\" placeholder=\"Search city by Name\" onChange={handleFilterByName} />\n            </div>\n            <hr />\n        </>\n    )\n}\n\nexport default FilterByName;","import React from 'react';\nimport '../stylesheets/layouts/loader.scss';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader__wrapper\">\n            <div className=\"loader\">\n                <span></span>\n                <span></span>\n                <span></span>\n            </div>\n        </div>\n    )\n}\n\nexport default Loader;\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTimes, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport Header from './Header'\nimport CitiesList from './CitiesList';\nimport SelectedCities from './SelectedCities';\nimport FilterByName from './FilterByName';\nimport Loader from './Loader';\nimport '../stylesheets/layouts/app.scss';\n\nlibrary.add(faTimes, faSearch);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allChinaCities: [],\n      nameQuery: \"\",\n    }\n    this.getAllCitiesFromServer = this.getAllCitiesFromServer.bind(this);\n    this.handleCityCheckbox = this.handleCityCheckbox.bind(this)\n    this.handleDeleteCity = this.handleDeleteCity.bind(this);\n    this.resetSelectedList = this.resetSelectedList.bind(this);\n    this.handleSelectAll = this.handleSelectAll.bind(this);\n    this.handleFilterByName = this.handleFilterByName.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.getAllCitiesFromServer();\n  }\n\n  getAllCitiesFromServer() {\n    const citiesJSONurl = \"./cities-of-china.json\"\n    fetch(citiesJSONurl)\n      .then(resp => resp.json())\n      .then(allCities => allCities.cities.map(city => {\n        let formatCity = { ...city, isSelected: false }\n        return formatCity;\n      }))\n      .then(cities => this.setState({\n        allChinaCities: cities\n      }))\n  }\n\n  handleCityCheckbox(e) {\n    const { allChinaCities } = this.state\n    let selectedCityID = e.target.parentNode.dataset.id;\n    let newAllcities = []\n    for (let city of allChinaCities) {\n      if (selectedCityID === city.id) {\n        city.isSelected = !city.isSelected;\n        newAllcities.push(city)\n      } else {\n        newAllcities.push(city)\n      }\n    }\n    this.setState({\n      allChinaCities: newAllcities\n    })\n  }\n\n  handleDeleteCity(e) {\n    const { allChinaCities } = this.state\n    let elementId = e.currentTarget.dataset.id;\n    let newAllcities = []\n    for (let city of allChinaCities) {\n      if (city.id === elementId) {\n        city.isSelected = false;\n        newAllcities.push(city)\n      } else {\n        newAllcities.push(city)\n      }\n    }\n    this.setState({\n      allChinaCities: newAllcities\n    })\n  }\n\n  resetSelectedList() {\n    const { allChinaCities } = this.state\n    let newSelectedCities = allChinaCities.map(city => { city.isSelected = false; return city });\n    this.setState({\n      allChinaCities: newSelectedCities,\n    })\n  }\n\n  handleSelectAll() {\n    const { allChinaCities, nameQuery } = this.state;\n    let filteredCities = allChinaCities.filter(chineseCity => chineseCity.name.toLowerCase().includes(nameQuery.toLowerCase()))\n    let selectedCitiesFromFilter = [];\n    for (let city of allChinaCities) {\n      if (filteredCities.includes(city)) {\n        city.isSelected = true\n      }\n      selectedCitiesFromFilter.push(city)\n    }\n    this.setState({\n      allChinaCities: selectedCitiesFromFilter\n    })\n\n  }\n\n  handleFilterByName(e) {\n    let userQuerySearch = e.target.value;\n    this.setState({\n      nameQuery: userQuerySearch,\n    })\n  }\n\n  handleCheck() {\n    const { allChinaCities, nameQuery } = this.state;\n    let citiesSelected = allChinaCities.filter(chineseCity => chineseCity.name.toLowerCase().includes(nameQuery.toLowerCase()));\n    return citiesSelected.reduce((acc, city) => {\n      if (city.isSelected === false) {\n        return false;\n      } else {\n        return acc;\n      }\n    }, true);\n\n  }\n\n  render() {\n    const { allChinaCities, nameQuery } = this.state\n    return (\n      <div className=\"App\">\n        <Header />\n        {(allChinaCities == \"\") ? <Loader /> :\n          <section className=\"section__main\">\n            < div className=\"section__main_wrapper\">\n              <FilterByName handleFilterByName={this.handleFilterByName} nameQuery={nameQuery} />\n              <CitiesList cities={allChinaCities.filter(chineseCity => chineseCity.name.toLowerCase().includes(nameQuery.toLowerCase()))} handleCityCheckbox={this.handleCityCheckbox} handleSelectAll={this.handleSelectAll} handleCheck={this.handleCheck} />\n            </div>\n            <SelectedCities selectedCities={allChinaCities.filter(city => city.isSelected)} handleDeleteCity={this.handleDeleteCity} resetSelectedList={this.resetSelectedList} />\n          </section>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/config/reset.scss';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}