{"version":3,"sources":["components/Header.js","components/CitiesList.js","components/SelectedCities.js","components/FilterByName.js","components/Loader.js","components/App.js","index.js"],"names":["Header","className","CitiesList","cities","handleCityCheckbox","handleSelectAll","selectedCities","type","onClick","length","map","city","isSelected","includes","key","id","data-id","name","checked","htmlFor","src","alt","lang","chineseName","SelectedCities","handleDeleteCity","resetSelectedList","icon","FilterByName","handleFilterByName","placeholder","onKeyUp","Loader","library","add","faTimes","faSearch","App","props","state","allChinaCities","nameQuery","getAllCitiesFromServer","bind","this","fetch","then","resp","json","setState","e","selectedCityID","target","parentNode","dataset","concat","removeCity","elementIndex","indexOf","newSelectedCities","splice","elementId","currentTarget","slice","filteredCities","filter","chineseCity","toLowerCase","userQuerySearch","value","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9c7d4fd.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/layouts/header.scss'\n\nconst Header = () => {\n    return (\n        <header className=\"header__wrapper\">\n            <h1 className=\"header__title\">Cities of China</h1>\n            <hr />\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport '../stylesheets/layouts/main.scss'\n\nconst CitiesList = ({ cities, handleCityCheckbox, handleSelectAll, selectedCities }) => {\n    return (\n        <div className=\"main__list_wrapper\">\n            <input type=\"checkbox\" onClick={handleSelectAll} />\n            <label className=\"main__list_selectAll-label\">\n                <span onClick={handleSelectAll}></span> {cities.length} items\n            </label>\n            <hr />\n            <ul className=\"main__list\">\n                {cities.map(city => {\n                    let isSelected = false;\n                    (selectedCities.includes(city)) ? isSelected = true : isSelected = false;\n                    return (\n                        <li key={city.id} className=\"main__list_item\" data-id={city.id}>\n                            {isSelected ? <>\n                                <input type=\"checkbox\" onClick={handleCityCheckbox} name=\"listinput\" checked />\n                                <label className=\"main__list_item_label\" htmlFor=\"listinput\"><span></span></label>\n                            </> : <>\n                                    <input type=\"checkbox\" onClick={handleCityCheckbox} name=\"listinput\" />\n                                    <label className=\"main__list_item_label\" htmlFor=\"listinput\"><span></span></label>\n                                </>}\n                            <img src=\"./images/landscape.svg\" alt=\"\" className=\"main__list_img\" />\n                            <div className=\"main__list_infowrapper\">\n                                <p>{city.name}</p>\n                                <p lang=\"zh\">{city.chineseName}</p>\n                            </div>\n\n                        </li>\n                    )\n                })}\n            </ul>\n        </div>\n    )\n}\n\n\nexport default CitiesList;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst SelectedCities = ({ selectedCities, handleDeleteCity, resetSelectedList }) => {\n    return (\n        < div className=\"main__selected_wrapper\">\n            <div className=\"main__selected_header\">\n                <p className=\"main__selected_header_length\">{selectedCities.length} items</p>\n                <p className=\"main__selected_header_clear\" onClick={resetSelectedList}>clear</p>\n            </div>\n            <div className=\"main__selected_wrapperlist\">\n                <ul className=\"main__selected_list\">\n                    {selectedCities.length ? selectedCities.map(city =>\n                        <li key={city.id} className=\"main__selected_item\" data-id={city.id} onClick={handleDeleteCity} >\n                            <img src=\"./images/landscape.svg\" alt=\"\" className=\"main__list_img\" />\n                            <div className=\"main__list_infowrapper\">\n                                <p>{city.name}</p>\n                                <p lang=\"zh\">{city.chineseName}</p>\n                            </div>\n                            <div className=\"main__selected_iconwrapper\">\n                                <FontAwesomeIcon icon=\"times\" className=\"main__selected_icon\" />\n                            </div>\n                        </li>) : \"Select a city individually or all at once!\"\n                    }\n                </ul>\n            </div>\n        </div>)\n}\n\nexport default SelectedCities","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '../stylesheets/layouts/filter.scss';\n\n\nconst FilterByName = ({ handleFilterByName }) => {\n    return (\n        <>\n            <div className=\"filter__wrapper\">\n                <FontAwesomeIcon icon=\"search\" />\n                <input type=\"text\" className=\"filter__inputname\" placeholder=\"Search city by Name\" onKeyUp={handleFilterByName} />\n            </div>\n            <hr />\n        </>\n    )\n}\n\nexport default FilterByName;","import React from 'react';\nimport '../stylesheets/layouts/loader.scss';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader__wrapper\">\n            <div className=\"loader\">\n                <span></span>\n                <span></span>\n                <span></span>\n            </div>\n        </div>\n    )\n}\n\nexport default Loader;\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTimes, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport Header from './Header'\nimport CitiesList from './CitiesList';\nimport SelectedCities from './SelectedCities';\nimport FilterByName from './FilterByName';\nimport Loader from './Loader';\nimport '../stylesheets/layouts/app.scss';\n\nlibrary.add(faTimes, faSearch);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allChinaCities: [],\n      selectedCities: [],\n      nameQuery: \"\",\n    }\n    this.getAllCitiesFromServer = this.getAllCitiesFromServer.bind(this);\n    this.handleCityCheckbox = this.handleCityCheckbox.bind(this)\n    this.handleDeleteCity = this.handleDeleteCity.bind(this);\n    this.resetSelectedList = this.resetSelectedList.bind(this);\n    this.handleSelectAll = this.handleSelectAll.bind(this);\n    this.handleFilterByName = this.handleFilterByName.bind(this)\n\n  }\n\n  componentDidMount() {\n    this.getAllCitiesFromServer();\n  }\n\n  getAllCitiesFromServer() {\n    const citiesJSONurl = \"./cities-of-china.json\"\n    fetch(citiesJSONurl)\n      .then(resp => resp.json())\n      //.then(cities => console.log(cities))\n      .then(cities => this.setState({\n        allChinaCities: cities.cities\n      }))\n  }\n\n  handleCityCheckbox(e) {\n    const { allChinaCities, selectedCities } = this.state\n    let selectedCityID = e.target.parentNode.dataset.id;\n    if (e.target.checked) {\n      for (let city of allChinaCities) {\n        if (selectedCityID === city.id) {\n          this.setState({\n            selectedCities: selectedCities.concat(city)\n          })\n        }\n      }\n    } else {\n      for (let removeCity of selectedCities) {\n        if (removeCity.id === selectedCityID) {\n          let elementIndex = selectedCities.indexOf(removeCity);\n          let newSelectedCities = [...selectedCities.splice(0, elementIndex), ...selectedCities.splice(elementIndex + 1)]\n          this.setState({\n            selectedCities: newSelectedCities,\n          })\n        }\n      }\n    }\n  }\n\n  handleDeleteCity(e) {\n    const { selectedCities } = this.state\n    let elementId = e.currentTarget.dataset.id;\n    for (let city of selectedCities) {\n      if (city.id === elementId) {\n        let elementIndex = selectedCities.indexOf(city);\n        let newSelectedCities = [...selectedCities.slice(0, elementIndex), ...selectedCities.slice(elementIndex + 1)]\n        this.setState({\n          selectedCities: newSelectedCities\n        })\n      }\n    }\n  }\n\n  resetSelectedList() {\n    let newSelectedCities = [];\n    this.setState({\n      selectedCities: newSelectedCities\n    })\n  }\n\n  handleSelectAll(e) {\n    const { allChinaCities, nameQuery } = this.state;\n    if (!nameQuery) {\n      e.target.checked ? this.setState({\n        selectedCities: allChinaCities\n      }) : this.setState({\n        selectedCities: []\n      })\n    } else {\n      let filteredCities = allChinaCities.filter(chineseCity => chineseCity.name.toLowerCase().includes(nameQuery.toLowerCase()));\n      e.target.checked ? this.setState({ selectedCities: filteredCities }) : this.setState({ selectedCities: [] })\n    }\n  }\n\n  handleFilterByName(e) {\n    let userQuerySearch = e.target.value;\n    this.setState({\n      nameQuery: userQuerySearch,\n    })\n  }\n\n  render() {\n    const { allChinaCities, selectedCities, nameQuery } = this.state\n    return (\n      <div className=\"App\">\n        <Header />\n        {(allChinaCities == \"\") ? <Loader /> : <section className=\"section__main\">\n          < div className=\"section__main_wrapper\">\n            <FilterByName handleFilterByName={this.handleFilterByName} />\n            <CitiesList cities={allChinaCities.filter(chineseCity => chineseCity.name.toLowerCase().includes(nameQuery.toLowerCase()))} handleCityCheckbox={this.handleCityCheckbox} handleSelectAll={this.handleSelectAll} selectedCities={selectedCities} />\n          </div>\n          <SelectedCities selectedCities={selectedCities} handleDeleteCity={this.handleDeleteCity} resetSelectedList={this.resetSelectedList} />\n        </section>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/config/reset.scss';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}